# Calculate test statistics
resample.dat$sample.s.ts[i] <- xbar / (s / sqrt(n))  # Using original standard deviation
resample.dat$sample.sr.ts[i] <- xbar / (sd(resamples) / sqrt(n))  # Using resampled standard deviation
}
# Observed t-statistic based on centered data
observed.t <- mean(finches$diff) / (sd(finches$diff) / sqrt(n))  # Corrected t-statistic
# Two-tailed p-value calculation: compare absolute values
pval.s <- mean(abs(resample.dat$sample.s.ts) >= abs(observed.t))  # For original sample SD
pval.sr <- mean(abs(resample.dat$sample.sr.ts) >= abs(observed.t))  # For resampled SD
# Rejection decision based on two-tailed test
if(pval.s < 0.05) {
simulation.dat$sample.s.reject[k] <- 1
} else {
simulation.dat$sample.s.reject[k] <- 0
}
if(pval.sr < 0.05) {
simulation.dat$sample.sr.reject[k] <- 1
} else {
simulation.dat$sample.sr.reject[k] <- 0
}
}
# Summarize Type I error rates
type_I_error_rate_s <- mean(simulation.dat$sample.s.reject)
type_I_error_rate_sr <- mean(simulation.dat$sample.sr.reject)
library(tidyverse)
finches <- read_csv("zebrafinches.csv")
# Parameters
R <- 1000  # Number of simulations
n <- 30  # Sample size
data <- rnorm(n, mean = 0, sd = 1)
data.null <- data - mean(data)
# Set up the results storage
simulation.dat <- tibble(
sample.s.reject = rep(NA, R),
sample.sr.reject = rep(NA, R)
)
for(k in 1:R) {
resample.dat <- tibble(
sample.s.ts = rep(NA, R),
sample.sr.ts = rep(NA, R)
)
# Resampling loop
for(i in 1:R) {
resamples <- sample(data.null, size = n, replace = TRUE)
xbar <- mean(resamples)
# Calculate test statistics
resample.dat$sample.s.ts[i] <- xbar / (s / sqrt(n))  # Using original standard deviation
resample.dat$sample.sr.ts[i] <- xbar / (sd(resamples) / sqrt(n))  # Using resampled standard deviation
}
# Observed t-statistic based on centered data
observed.t <- mean(data) / (sd(data) / sqrt(n))  # Corrected t-statistic
# Two-tailed p-value calculation
pval.s <- mean(abs(resample.dat$sample.s.ts) >= abs(observed.t))  # For original sample SD
pval.sr <- mean(abs(resample.dat$sample.sr.ts) >= abs(observed.t))  # For resampled SD
# Rejection decision based on two-tailed test
if(pval.s < 0.05) {
simulation.dat$sample.s.reject[k] <- 1
} else {
simulation.dat$sample.s.reject[k] <- 0
}
if(pval.sr < 0.05) {
simulation.dat$sample.sr.reject[k] <- 1
} else {
simulation.dat$sample.sr.reject[k] <- 0
}
}
# Summarize Type I error rates
type_I_error_rate_s <- mean(simulation.dat$sample.s.reject)
type_I_error_rate_sr <- mean(simulation.dat$sample.sr.reject)
set.seed(42)
# Parameters
n <- 25         # sample size
R <- 1000       # bootstrap reps
M <- 1000       # simulation reps (for Type I error estimation)
alpha <- 0.05   # significance level
# Initialize vectors to record whether each method rejected H0
reject_s <- logical(M)
reject_sr <- logical(M)
for (m in 1:M) {
# Generate data under H0: mean = 0
data <- finches$closer
s <- sd(data)
# Center data to align resampling with H0
null_data <- data - mean(data)
# Bootstrap t-distributions
t_s <- numeric(R)
t_sr <- numeric(R)
for (r in 1:R) {
resample <- sample(null_data, replace = TRUE)
t_s[r] <- mean(resample) / (s / sqrt(n))
t_sr[r] <- mean(resample) / (sd(resample) / sqrt(n))
}
# Observed t-statistic (from original sample)
obs_t_s <- mean(data) / (s / sqrt(n))
obs_t_sr <- mean(data) / (sd(data) / sqrt(n))
# Two-sided p-values
pval_s <- mean(abs(t_s) >= abs(obs_t_s))
pval_sr <- mean(abs(t_sr) >= abs(obs_t_sr))
# Record rejection of H0
reject_s[m] <- pval_s < alpha
reject_sr[m] <- pval_sr < alpha
}
# Type I error rates
type1_error_s <- mean(reject_s)
type1_error_sr <- mean(reject_sr)
cat("Type I Error Rate using original s:  ", round(type1_error_s, 4), "\n")
cat("Type I Error Rate using sample sr:   ", round(type1_error_sr, 4), "\n")
library(tidyverse)
# Parameters
R <- 1000  # Number of simulations
# Set up the results storage
simulation.dat <- tibble(
sample.s.reject = rep(NA, R),
sample.sr.reject = rep(NA, R)
)
for(k in 1:R) {
sim.dat <- rlaplace(n = 30, location = 0, scale = 4) #simulate rlapace data for n = 30
sim.dat.null <- sim.dat - mean(sim.dat)
s <- sd(sim.dat)
resample.dat <- tibble(
sample.s.ts = rep(NA, R),
sample.sr.ts = rep(NA, R)
)
# Resampling loop
for(i in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE)
xbar <- mean(resamples)
# Calculate test statistics
resample.dat$sample.s.ts[i] <- xbar / (s / sqrt(n))  # Using original standard deviation
resample.dat$sample.sr.ts[i] <- xbar / (sd(resamples) / sqrt(n))  # Using resampled standard deviation
}
# Observed t-statistic based on centered data
observed.t <- mean(sim.dat) / (sd(sim.dat) / sqrt(n))  # Corrected t-statistic
# Two-tailed p-value calculation
pval.s <- mean(resample.dat$sample.s.ts >= observed.t)  # For original sample SD
pval.sr <- mean(resample.dat$sample.sr.ts) >= observed.t)  # For resampled SD
for(k in 1:R) {
sim.dat <- rlaplace(n = 30, location = 0, scale = 4) #simulate rlapace data for n = 30
sim.dat.null <- sim.dat - mean(sim.dat)
s <- sd(sim.dat)
resample.dat <- tibble(
sample.s.ts = rep(NA, R),
sample.sr.ts = rep(NA, R)
)
# Resampling loop
for(i in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE)
xbar <- mean(resamples)
# Calculate test statistics
resample.dat$sample.s.ts[i] <- xbar / (s / sqrt(n))  # Using original standard deviation
resample.dat$sample.sr.ts[i] <- xbar / (sd(resamples) / sqrt(n))  # Using resampled standard deviation
}
# Observed t-statistic based on centered data
observed.t <- mean(sim.dat) / (sd(sim.dat) / sqrt(n))  # Corrected t-statistic
# Two-tailed p-value calculation
pval.s <- mean(resample.dat$sample.s.ts >= observed.t)  # For original sample SD
pval.sr <- mean(resample.dat$sample.sr.ts >= observed.t)  # For resampled SD
# Rejection decision based on two-tailed test
if(pval.s < 0.05) {
simulation.dat$sample.s.reject[k] <- 1
} else {
simulation.dat$sample.s.reject[k] <- 0
}
if(pval.sr < 0.05) {
simulation.dat$sample.sr.reject[k] <- 1
} else {
simulation.dat$sample.sr.reject[k] <- 0
}
}
library(tidyverse)
library(VGAM)
# Parameters
R <- 1000  # Number of simulations
# Set up the results storage
simulation.dat <- tibble(
sample.s.reject = rep(NA, R),
sample.sr.reject = rep(NA, R)
)
for(k in 1:R) {
sim.dat <- rlaplace(n = 30, location = 0, scale = 4) #simulate rlapace data for n = 30
sim.dat.null <- sim.dat - mean(sim.dat)
s <- sd(sim.dat)
resample.dat <- tibble(
sample.s.ts = rep(NA, R),
sample.sr.ts = rep(NA, R)
)
# Resampling loop
for(i in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE)
xbar <- mean(resamples)
# Calculate test statistics
resample.dat$sample.s.ts[i] <- xbar / (s / sqrt(n))  # Using original standard deviation
resample.dat$sample.sr.ts[i] <- xbar / (sd(resamples) / sqrt(n))  # Using resampled standard deviation
}
# Observed t-statistic based on centered data
observed.t <- mean(sim.dat) / (sd(sim.dat) / sqrt(n))  # Corrected t-statistic
# Two-tailed p-value calculation
pval.s <- mean(resample.dat$sample.s.ts >= observed.t)  # For original sample SD
pval.sr <- mean(resample.dat$sample.sr.ts >= observed.t)  # For resampled SD
# Rejection decision based on two-tailed test
if(pval.s < 0.05) {
simulation.dat$sample.s.reject[k] <- 1
} else {
simulation.dat$sample.s.reject[k] <- 0
}
if(pval.sr < 0.05) {
simulation.dat$sample.sr.reject[k] <- 1
} else {
simulation.dat$sample.sr.reject[k] <- 0
}
}
for(k in 1:R) {
sim.dat <- rlaplace(n = n, location = 0, scale = 4) #simulate rlapace data for n = 30
sim.dat.null <- sim.dat - mean(sim.dat)
s <- sd(sim.dat)
resample.dat <- tibble(
sample.s.ts = rep(NA, R),
sample.sr.ts = rep(NA, R)
)
# Resampling loop
for(i in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE)
xbar <- mean(resamples)
# Calculate test statistics
resample.dat$sample.s.ts[i] <- xbar / (s / sqrt(n))  # Using original standard deviation
resample.dat$sample.sr.ts[i] <- xbar / (sd(resamples) / sqrt(n))  # Using resampled standard deviation
}
# Observed t-statistic based on centered data
observed.t <- mean(sim.dat) / (sd(sim.dat) / sqrt(n))  # Corrected t-statistic
# Two-tailed p-value calculation
pval.s <- mean(resample.dat$sample.s.ts >= observed.t)  # For original sample SD
pval.sr <- mean(resample.dat$sample.sr.ts >= observed.t)  # For resampled SD
# Rejection decision based on two-tailed test
if(pval.s < 0.05) {
simulation.dat$sample.s.reject[k] <- 1
} else {
simulation.dat$sample.s.reject[k] <- 0
}
if(pval.sr < 0.05) {
simulation.dat$sample.sr.reject[k] <- 1
} else {
simulation.dat$sample.sr.reject[k] <- 0
}
}
for(k in 1:R) {
sim.dat <- rlaplace(n = 30, location = 0, scale = 4) #simulate rlapace data for n = 30
sim.dat.null <- sim.dat - mean(sim.dat)
s <- sd(sim.dat)
resample.dat <- tibble(
sample.s.ts = rep(NA, R),
sample.sr.ts = rep(NA, R)
)
# Resampling loop
for(i in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE)
xbar <- mean(resamples)
# Calculate test statistics
resample.dat$sample.s.ts[i] <- xbar / (s / sqrt(n))  # Using original standard deviation
resample.dat$sample.sr.ts[i] <- xbar / (sd(resamples) / sqrt(n))  # Using resampled standard deviation
}
# Observed t-statistic based on centered data
observed.t <- mean(sim.dat) / (sd(sim.dat) / sqrt(n))  # Corrected t-statistic
# Two-tailed p-value calculation
pval.s <- mean(resample.dat$sample.s.ts >= observed.t)  # For original sample SD
pval.sr <- mean(resample.dat$sample.sr.ts >= observed.t)  # For resampled SD
# Rejection decision based on two-tailed test
if(pval.s < 0.05) {
simulation.dat$sample.s.reject[k] <- 1
} else {
simulation.dat$sample.s.reject[k] <- 0
}
if(pval.sr < 0.05) {
simulation.dat$sample.sr.reject[k] <- 1
} else {
simulation.dat$sample.sr.reject[k] <- 0
}
}
n = 30 # Sample size
for(k in 1:R) {
sim.dat <- rlaplace(n = n, location = 0, scale = 4) #simulate rlapace data for n = 30
sim.dat.null <- sim.dat - mean(sim.dat)
s <- sd(sim.dat)
resample.dat <- tibble(
sample.s.ts = rep(NA, R),
sample.sr.ts = rep(NA, R)
)
# Resampling loop
for(i in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE)
xbar <- mean(resamples)
# Calculate test statistics
resample.dat$sample.s.ts[i] <- xbar / (s / sqrt(n))  # Using original standard deviation
resample.dat$sample.sr.ts[i] <- xbar / (sd(resamples) / sqrt(n))  # Using resampled standard deviation
}
# Observed t-statistic based on centered data
observed.t <- mean(sim.dat) / (sd(sim.dat) / sqrt(n))  # Corrected t-statistic
# Two-tailed p-value calculation
pval.s <- mean(resample.dat$sample.s.ts >= observed.t)  # For original sample SD
pval.sr <- mean(resample.dat$sample.sr.ts >= observed.t)  # For resampled SD
# Rejection decision based on two-tailed test
if(pval.s < 0.05) {
simulation.dat$sample.s.reject[k] <- 1
} else {
simulation.dat$sample.s.reject[k] <- 0
}
if(pval.sr < 0.05) {
simulation.dat$sample.sr.reject[k] <- 1
} else {
simulation.dat$sample.sr.reject[k] <- 0
}
}
# Summarize Type I error rates
type_I_error_rate_s <- mean(simulation.dat$sample.s.reject)
type_I_error_rate_sr <- mean(simulation.dat$sample.sr.reject)
library(tidyverse)
library(VGAM)
set.seed(7272)
# Parameters
R <- 1000  # Number of simulations
n = 30 # Sample size
# Set up the results storage
simulation.dat <- tibble(
sample.s.reject = rep(NA, R),
sample.sr.reject = rep(NA, R)
)
for(k in 1:R) {
sim.dat <- rlaplace(n = n, location = 0, scale = 4) #simulate rlapace data for n = 30
sim.dat.null <- sim.dat - mean(sim.dat)
s <- sd(sim.dat)
resample.dat <- tibble(
sample.s.ts = rep(NA, R),
sample.sr.ts = rep(NA, R)
)
# Resampling loop
for(i in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE)
xbar <- mean(resamples)
# Calculate test statistics
resample.dat$sample.s.ts[i] <- xbar / (s / sqrt(n))  # Using original standard deviation
resample.dat$sample.sr.ts[i] <- xbar / (sd(resamples) / sqrt(n))  # Using resampled standard deviation
}
# Observed t-statistic based on centered data
observed.t <- mean(sim.dat) / (sd(sim.dat) / sqrt(n))  # Corrected t-statistic
# Two-tailed p-value calculation
pval.s <- mean(resample.dat$sample.s.ts >= observed.t)  # For original sample SD
pval.sr <- mean(resample.dat$sample.sr.ts >= observed.t)  # For resampled SD
# Rejection decision based on two-tailed test
if(pval.s < 0.05) {
simulation.dat$sample.s.reject[k] <- 1
} else {
simulation.dat$sample.s.reject[k] <- 0
}
if(pval.sr < 0.05) {
simulation.dat$sample.sr.reject[k] <- 1
} else {
simulation.dat$sample.sr.reject[k] <- 0
}
}
# Summarize Type I error rates
type_I_error_rate_s <- mean(simulation.dat$sample.s.reject)
type_I_error_rate_sr <- mean(simulation.dat$sample.sr.reject)
#Store capture results
simulation.mean.dat <- tibble(
sample.capture = rep(NA, R)
)
for(i in 1:R) {
sim.dat <- rlaplace(n = n, location = 0, scale = 4) #simulate rlapace data for n = 30
sim.dat.null <- sim.dat - mean(sim.dat) #Shift the data to null
resample.dats <- tibble(
xbars = rep(NA, R)
)
# Resampling loop
for(k in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE) # Take resamples
resample.dats$xbars[k] <- mean(resamples)
}
#Compute confidence interval
ci <- quantile(resample.dats, c(0.025, 0.975))
#Check for coverage
simulation.mean.dat[i] <- (true_mu >= ci[1] && true_mu <= ci[2])
}
#Store capture results
simulation.mean.dat <- tibble(
sample.capture = rep(NA, R)
)
for(i in 1:R) {
sim.dat <- rlaplace(n = n, location = 0, scale = 4) #simulate rlapace data for n = 30
sim.dat.null <- sim.dat - mean(sim.dat) #Shift the data to null
resample.dats <- tibble(
xbars = rep(NA, R)
)
# Resampling loop
for(k in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE) # Take resamples
resample.dats$xbars[k] <- mean(resamples)
}
#Compute confidence interval
ci <- quantile(resample.dats, c(0.025, 0.975))
#Check for coverage
simulation.mean.dat[i] <- (true_mu >= ci[1] && true_mu <= ci[2])
}
for(i in 1:R) {
sim.dat <- rlaplace(n = n, location = 0, scale = 4) #simulate rlapace data for n = 30
sim.dat.null <- sim.dat - mean(sim.dat) #Shift the data to null
resample.dats <- tibble(
xbars = rep(NA, R)
)
# Resampling loop
for(k in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE) # Take resamples
resample.dats$xbars[k] <- mean(resamples)
}
#Compute confidence interval
ci <- quantile(resample.dats, c(0.025, 0.975))
#Check for coverage
simulation.mean.dat[i] <- (0 >= ci[1] && 0 <= ci[2])
}
for(i in 1:R) {
sim.dat <- rlaplace(n = n, location = 0, scale = 4) #simulate rlapace data for n = 30
sim.dat.null <- sim.dat - mean(sim.dat) #Shift the data to null
resample.dats <- tibble(
xbars = rep(NA, R)
)
# Resampling loop
for(k in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE) # Take resamples
resample.dats$xbars[k] <- mean(resamples)
}
#Compute confidence interval
ci <- quantile(resample.dats$xbars, c(0.025, 0.975))
#Check for coverage
simulation.mean.dat[i] <- (0 >= ci[1] && 0 <= ci[2])
}
View(simulation.mean.dat)
0 >= ci[1] && 0 <= ci[2]
mean(sim.dat)
#Store capture results
simulation.mean.dat <- tibble(
sample.capture = rep(NA, R)
)
for(i in 1:R) {
sim.dat <- rlaplace(n = n, location = 0, scale = 4) #simulate rlapace data for n = 30
mu0 <- mean(sim.dat) #original mean
sim.dat.null <- sim.dat - mean(sim.dat) #Shift the data to null
resample.dats <- tibble(
xbars = rep(NA, R)
)
# Resampling loop
for(k in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE) # Take resamples
resample.dats$xbars[k] <- mean(resamples)
}
#Compute confidence interval
ci <- quantile(resample.dats$xbars, c(0.025, 0.975))
#Check for coverage
if((mu0 >= ci[1] && mu0 <= ci[2])){
simulation.mean.dat$sample.capture[i] <- 1
} else{
simulation.mean.dat$sample.capture[i] <- 0
}
}
R = 1000
for(i in 1:R) {
sim.dat <- rlaplace(n = n, location = 0, scale = 4) #simulate rlapace data for n = 30
mu0 <- mean(sim.dat) #original mean
sim.dat.null <- sim.dat - mean(sim.dat) #Shift the data to null
resample.dats <- tibble(
xbars = rep(NA, R)
)
# Resampling loop
for(k in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE) # Take resamples
resample.dats$xbars[k] <- mean(resamples)
}
#Compute confidence interval
ci <- quantile(resample.dats$xbars, c(0.025, 0.975))
#Check for coverage
if((mu0 >= ci[1] && mu0 <= ci[2])){
simulation.mean.dat$sample.capture[i] <- 1
} else{
simulation.mean.dat$sample.capture[i] <- 0
}
}
n = 10
n = 30
#Store capture results
simulation.mean.dat <- tibble(
sample.capture = rep(NA, R)
)
for(i in 1:R) {
sim.dat <- rlaplace(n = n, location = 0, scale = 4) #simulate rlapace data for n = 30
mu0 <- mean(sim.dat) #original mean
sim.dat.null <- sim.dat - mean(sim.dat) #Shift the data to null
resample.dats <- tibble(
xbars = rep(NA, R)
)
# Resampling loop
for(k in 1:R) {
resamples <- sample(sim.dat.null, size = n, replace = TRUE) # Take resamples
resample.dats$xbars[k] <- mean(resamples)
}
#Compute confidence interval
ci <- quantile(resample.dats$xbars, c(0.025, 0.975))
#Check for coverage
if((mu0 >= ci[1] && mu0 <= ci[2])){
simulation.mean.dat$sample.capture[i] <- 1
} else{
simulation.mean.dat$sample.capture[i] <- 0
}
}
View(simulation.mean.dat)
capture.porportion <- mean(simulation.mean.dat$sample.capture)
